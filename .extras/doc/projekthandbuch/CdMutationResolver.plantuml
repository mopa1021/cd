@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package security.auth {
  class "type Role = 'ADMIN' | 'MITARBEITER' | 'KUNDE'" as Role
  hide Role circle

  class "@Roles" as Roles
  hide Roles circle

  Roles .right.> Role
}

package cd #DDDDDD {
  package entity #FFFFFF {
    class Cd <<entity>>
  }

  package service #FFFFFF {
    class CdWriteService << control >>
  }

  class "type CdDTO = Omit<Cd, 'lieder' | 'aktualisiert' | 'erzeugt'" as CdDTO
  hide CdDTO circle

    interface IdInput {
        id: number
    }

  class CdMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() cdDTO: CdDTO): Promise<number>
  }

  CdMutationResolver o-down-> "1" CdWriteService : service

  CdMutationResolver ..> Cd
  CdMutationResolver ..> CdDTO
  CdMutationResolver ..> IdInput
  CdDTO .up.> Cd
  CdMutationResolver .right.> Promise
  CdMutationResolver ..> Resolver

  CdMutationResolver .up.> Roles
  CdMutationResolver .up.> Role

  CdDTO .[hidden].> Promise
  CdDTO .[hidden].> Resolver
}

hide empty members

@enduml
